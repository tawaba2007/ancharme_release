<?php

namespace DoctrineProxy\__CG__\Eccube\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PageLayout extends \Eccube\Entity\PageLayout implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'url', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'file_name', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'edit_flg', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'author', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'description', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'keyword', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'update_url', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'meta_robots', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'meta_tags', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'BlockPositions', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'DeviceType');
        }

        return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'url', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'file_name', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'edit_flg', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'author', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'description', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'keyword', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'update_url', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'meta_robots', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'meta_tags', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'BlockPositions', '' . "\0" . 'Eccube\\Entity\\PageLayout' . "\0" . 'DeviceType');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PageLayout $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getColumnNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColumnNum', array());

        return parent::getColumnNum();
    }

    /**
     * {@inheritDoc}
     */
    public function getTheme()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTheme', array());

        return parent::getTheme();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlocksPositionByTargetId($target_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlocksPositionByTargetId', array($target_id));

        return parent::getBlocksPositionByTargetId($target_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnusedPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnusedPosition', array());

        return parent::getUnusedPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getHeadPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeadPosition', array());

        return parent::getHeadPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getHeaderPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeaderPosition', array());

        return parent::getHeaderPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentsTopPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentsTopPosition', array());

        return parent::getContentsTopPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getSideLeftPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSideLeftPosition', array());

        return parent::getSideLeftPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getMainTopPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainTopPosition', array());

        return parent::getMainTopPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getMainBottomPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainBottomPosition', array());

        return parent::getMainBottomPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getSideRightPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSideRightPosition', array());

        return parent::getSideRightPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentsBottomPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentsBottomPosition', array());

        return parent::getContentsBottomPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getFooterPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFooterPosition', array());

        return parent::getFooterPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlocksByTargetId($target_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlocksByTargetId', array($target_id));

        return parent::getBlocksByTargetId($target_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnused()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnused', array());

        return parent::getUnused();
    }

    /**
     * {@inheritDoc}
     */
    public function getHead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHead', array());

        return parent::getHead();
    }

    /**
     * {@inheritDoc}
     */
    public function getHeader()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeader', array());

        return parent::getHeader();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentsTop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentsTop', array());

        return parent::getContentsTop();
    }

    /**
     * {@inheritDoc}
     */
    public function getSideLeft()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSideLeft', array());

        return parent::getSideLeft();
    }

    /**
     * {@inheritDoc}
     */
    public function getMainTop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainTop', array());

        return parent::getMainTop();
    }

    /**
     * {@inheritDoc}
     */
    public function getMainBottom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainBottom', array());

        return parent::getMainBottom();
    }

    /**
     * {@inheritDoc}
     */
    public function getSideRight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSideRight', array());

        return parent::getSideRight();
    }

    /**
     * {@inheritDoc}
     */
    public function getContentsBottom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentsBottom', array());

        return parent::getContentsBottom();
    }

    /**
     * {@inheritDoc}
     */
    public function getFooter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFooter', array());

        return parent::getFooter();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setFileName($fileName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFileName', array($fileName));

        return parent::setFileName($fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileName', array());

        return parent::getFileName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEditFlg($editFlg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEditFlg', array($editFlg));

        return parent::setEditFlg($editFlg);
    }

    /**
     * {@inheritDoc}
     */
    public function getEditFlg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEditFlg', array());

        return parent::getEditFlg();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', array($author));

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', array());

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeyword($keyword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeyword', array($keyword));

        return parent::setKeyword($keyword);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeyword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeyword', array());

        return parent::getKeyword();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateUrl($updateUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateUrl', array($updateUrl));

        return parent::setUpdateUrl($updateUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateUrl', array());

        return parent::getUpdateUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateDate($createDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateDate', array($createDate));

        return parent::setCreateDate($createDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', array());

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateDate($updateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateDate', array($updateDate));

        return parent::setUpdateDate($updateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', array());

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaRobots($metaRobots)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaRobots', array($metaRobots));

        return parent::setMetaRobots($metaRobots);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaRobots()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaRobots', array());

        return parent::getMetaRobots();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaTags($metaTags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaTags', array($metaTags));

        return parent::setMetaTags($metaTags);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaTags', array());

        return parent::getMetaTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addBlockPosition(\Eccube\Entity\BlockPosition $blockPosition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlockPosition', array($blockPosition));

        return parent::addBlockPosition($blockPosition);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBlockPosition(\Eccube\Entity\BlockPosition $blockPosition)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBlockPosition', array($blockPosition));

        return parent::removeBlockPosition($blockPosition);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockPositions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockPositions', array());

        return parent::getBlockPositions();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeviceType(\Eccube\Entity\Master\DeviceType $deviceType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeviceType', array($deviceType));

        return parent::setDeviceType($deviceType);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeviceType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeviceType', array());

        return parent::getDeviceType();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', array($offset));

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', array($offset, $value));

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', array($offset));

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', array($offset));

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function setPropertiesFromArray(array $arrProps, array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPropertiesFromArray', array($arrProps, $excludeAttribute, $parentClass));

        return parent::setPropertiesFromArray($arrProps, $excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array($excludeAttribute, $parentClass));

        return parent::toArray($excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function copyProperties($srcObject, array $excludeAttribute = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'copyProperties', array($srcObject, $excludeAttribute));

        return parent::copyProperties($srcObject, $excludeAttribute);
    }

}
