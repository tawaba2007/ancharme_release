<?php

namespace Plugin\SimpleCoupon\Repository;

use Doctrine\ORM\EntityRepository;
use Monolog\Logger;
use Eccube\Util\Str;

/**
 * ConditionProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConditionProductRepository extends EntityRepository
{
	
	protected $app;
	
	public function setApplication($app)
	{
		$this->app = $app;
	}
	
	
	public function getQueryBuilderBySearchDataForAdmin($searchData){
		
		$qb = $this->createQueryBuilder('con')
				->addSelect('pro')
				->addSelect('class')
				->innerJoin('con.Product', 'pro')
				->innerJoin('con.ProductClass', 'class');
		
		$qb->andWhere('con.couponId = :coupon_id')->setParameter('coupon_id', $searchData['coupon_id']);
		$qb->andWhere('pro.del_flg = :del_flg')->setParameter('del_flg', '0');
		
		// Order By
		$qb->addOrderBy('con.productClassId', 'ASC');
		
		return $qb;
		
	}
	
	public function getQueryBuilderBySearchDataForAdminCategory($searchData){
		
		$qb = $this->createQueryBuilder('con')
				->addSelect('cat')
				->innerJoin('con.Category', 'cat');
		
		$qb->andWhere('con.couponId = :coupon_id')->setParameter('coupon_id', $searchData['coupon_id']);
		$qb->andWhere('cat.del_flg = :del_flg')->setParameter('del_flg', '0');
		
		
		// Order By
		$qb->addOrderBy('con.categoryId', 'ASC');
		
		return $qb;
		
	}

	
}
