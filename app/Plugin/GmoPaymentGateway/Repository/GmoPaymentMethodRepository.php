<?php
/*
 * Copyright(c) 2015 GMO Payment Gateway, Inc. All rights reserved.
 * http://www.gmo-pg.com/
 */

namespace Plugin\GmoPaymentGateway\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GmoPaymentMethodRepository extends EntityRepository
{

    /**
     * @var array array of configs
     */
    private $config;

    /**
     * Set the config of this repository
     * @param array $config
     */
    public function setConfig(array $config)
    {
        $this->config = $config;
    }

    /**
     * Find or create payment method
     *
     * @param type $id
     * @return type
     */
    public function findOrCreate($id)
    {
        if ($id == 0) {
            $Payment = new \Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod();
            $Payment
                ->setDelFlg(0)
                ->setUpdateDate('CURRENT_TIMESTAMP')
                ->setCreateDate('CURRENT_TIMESTAMP');
        } else {
            $Payment = $this->find($id);
        }

        return $Payment;
    }

    /**
     * find all
     *
     * @return type
     */
    public function findAllArray()
    {

        $query = $this
            ->getEntityManager()
            ->createQuery('SELECT p FROM Eccube\Entity\Payment p INDEX BY p.id');
        $result = $query
            ->getResult(Query::HYDRATE_ARRAY);

        return $result;
    }

    /**
     * Find mul pay payment
     *
     * @return type
     */
    public function findMulPayPayments()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p.id, p.method, g.memo03')
            ->from('\Eccube\Entity\Payment', 'p')
            ->innerJoin('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where($qb->expr()->andx(                
                $qb->expr()->eq('g.code', ':code'))
            );
        $qb->setParameter('code', $this->config['PG_MULPAY_CODE']);
        
        $ret = $qb
            ->getQuery()
            ->getResult();
        
        
        return $ret;
    }

    /**
     * Get all payment_id of table dtb_payment base on plugin_code of table dtb_gmo_payment_method
     *
     * @param bool $incDel Flag for counting deleted record
     * @return array()
     */
    public function getPaymentByCode($incDel,$app)
    {
        $softDeleteFilter = $app['orm.em']->getFilters()->getFilter('soft_delete');
        $originExcludes = $softDeleteFilter->getExcludes();

        if ($incDel){
            $softDeleteFilter->setExcludes(array(
                'Eccube\Entity\Payment',
                'Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod'
            )); 
        }
        

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p.id')
            ->from('\Eccube\Entity\Payment', 'p')
            ->innerJoin('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where($qb->expr()->andx(                
                $qb->expr()->eq('g.code', ':code'))
            );
        $qb->setParameter('code', $this->config['PG_MULPAY_CODE']);
        
        $ret = $qb
            ->getQuery()
            ->getResult();
        
        if ($incDel){
            $softDeleteFilter->setExcludes($originExcludes);
        }
        
        return $ret;
        
        
    }

    /**
     * Get payment by type, with option to including or excluding deleted record
     *
     * @param type $paymentTypeId
     * @param type $app
     * @return type
     */
    public function getPaymentByType($paymentTypeId, $incDel, $app)
    {
        $softDeleteFilter = $app['orm.em']->getFilters()->getFilter('soft_delete');
        $originExcludes = $softDeleteFilter->getExcludes();
            
        if ($incDel){
            $softDeleteFilter->setExcludes(array(
                'Eccube\Entity\Payment',
                'Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod'
            )); 
        }
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p')
            ->from('\Eccube\Entity\Payment', 'p')
            ->join('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where(
                $qb->expr()->eq('g.memo03', ':x')
            );
        $qb->setParameter('x', $paymentTypeId);
        
        $ret = $qb
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
        
        if ($incDel){
            $softDeleteFilter->setExcludes($originExcludes);
        }
        
        return $ret;
    }
    
    /**
     * Get payment from dtb_payment by id, with option to including or excluding deleted record
     *
     * @param type $id, $incDel, $app
     * @param type $app
     * @return object Payment
     */
    public function getAllPaymentMethods($id, $incDel, $app)
    {
        $softDeleteFilter = $app['orm.em']->getFilters()->getFilter('soft_delete');
        $originExcludes = $softDeleteFilter->getExcludes();
            
        if ($incDel){
            $softDeleteFilter->setExcludes(array(
                'Eccube\Entity\Payment',
                'Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod'
            )); 
        }
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p')
            ->from('\Eccube\Entity\Payment', 'p')
            ->join('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where(
                $qb->expr()->eq('p.id', ':id')
            );
        $qb->setParameter('id', $id);
        
        $ret = $qb
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
        
        if ($incDel){
            $softDeleteFilter->setExcludes($originExcludes);
        }
        
        return $ret;
    }
    
    public function getGmoPayment($field, $value, $incDel, $app){
        $softDeleteFilter = $app['orm.em']->getFilters()->getFilter('soft_delete');
        $originExcludes = $softDeleteFilter->getExcludes();
            
        if ($incDel){
            $softDeleteFilter->setExcludes(array(
                'Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod'
            )); 
        }
        
        $GmoPayment = $app['orm.em']->getRepository('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod')
                      ->findOneBy(array($field => $value));
        
        if ($incDel){
            $softDeleteFilter->setExcludes($originExcludes);
        }
        
        return $GmoPayment;
        
    }
    
    /**
     * Get payment list
     *
     * @return type
     */
    public function getPaymentList()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p.id')
            ->from('\Eccube\Entity\Payment', 'p')
            ->join('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where(
                $qb->expr()->eq('g.code', ':x')
            );
        $qb->setParameter('x', $this->config['PG_MULPAY_CODE']);
        return $qb
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Delete payment
     *
     * @param type $paymentId
     * @return boolean
     */
    public function deletePayment($paymentId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('p')
            ->from('\Eccube\Entity\Payment', 'p')
            ->where($qb->expr()->andx(
                $qb->expr()->eq('p.del_flg', 0),
                $qb->expr()->eq('p.id', ':id'))
            );
        $qb->setParameter('id', $paymentId);

        try {
            $Payment = $qb
                ->getQuery()
                ->setMaxResults(1)
                ->getSingleResult();

        } catch (\Exception $e) {
            return false;
        }

        $em = $this->getEntityManager();
        $em->remove($Payment);
        $em->flush();

        return true;
    }
    
    function getGmoRegistMethod($code)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('g')
            ->from('\Eccube\Entity\Payment', 'p')
            ->innerJoin('\Plugin\GmoPaymentGateway\Entity\GmoPaymentMethod', 'g', 'WITH', 'p.id = g.id')
            ->where($qb->expr()->andx(                
                $qb->expr()->eq('g.memo03', ':memo03')),
                $qb->expr()->eq('p.del_flg', 0),
                $qb->expr()->eq('g.del_flg', 0),
                $qb->expr()->eq('g.code', ':code')    
            );
        $qb->setParameter('memo03', $this->config['PG_MULPAY_PAYID_REGIST_CREDIT']);
        $qb->setParameter('code', $code);
        $ret = $qb
            ->getQuery()
            ->getResult();
        return $ret;
    }

}
