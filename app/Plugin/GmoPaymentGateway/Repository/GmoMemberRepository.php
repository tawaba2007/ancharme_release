<?php
/*
 * Copyright(c) 2015 GMO Payment Gateway, Inc. All rights reserved.
 * http://www.gmo-pg.com/
 */

namespace Plugin\GmoPaymentGateway\Repository;

use Doctrine\ORM\EntityRepository;
use Plugin\GmoPaymentGateway\Entity\GmoMember;

/**
 * GmoMemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GmoMemberRepository extends EntityRepository
{

	protected $app;
    
    protected $config;

    public function setApp(\Eccube\Application $app) {
        $this->app = $app;
        $this->config = $app['config']['GmoPaymentGateway']['const'];
    }

    // Get customer not exist on dtb_gmo_member
    public function getCustomers($app)
    {
        $this->getEntityManager()->getFilters()->disable("soft_delete");

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('c.id')
        ->from('\Eccube\Entity\Customer', 'c')
        ->where('c.Status = 2');
        $qb->andWhere($qb->expr()->not($qb->expr()->exists('SELECT me.customer_id FROM \Plugin\GmoPaymentGateway\Entity\GmoMember me WHERE me.customer_id = c.id AND me.customer_create_date = c.create_date')));
        
        $result = $qb->getQuery()->getArrayResult();
        
        $this->getEntityManager()->getFilters()->enable("soft_delete");
        
        return $result;

    }
    
    /**
     * Get all customer
     * @return type $qb
     */
    public function getAllCustomersQueryBuilder($startTime){
        $this->getEntityManager()->getFilters()->disable('soft_delete');
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('c')
            ->from('\Eccube\Entity\Customer', 'c')
            ->where('c.Status = 2');
        $qb->andWhere($qb->expr()->not($qb->expr()->exists("SELECT me FROM \Plugin\GmoPaymentGateway\Entity\GmoMember me WHERE me.create_date < '$startTime' AND me.customer_id = c.id AND me.customer_create_date = c.create_date")));
                
        $this->getEntityManager()->getFilters()->enable('soft_delete');
        
        return $qb;
    }
    
    // Update or create GmoMemberId
    public function updateOrCreate($app, $Customer=null ,$newMemberId=null)
    {   
        // Check null parameters
        if(is_null($Customer)){
            return false;
        // Update or create            
        } else{
            $GmoMember = $this->findOneBy(array('customer_id' => $Customer->getId(), 'customer_create_date' => $Customer->getCreateDate()));
            if(is_null($GmoMember)){
                $GmoMember = new GmoMember();
                $GmoMember->setNewMemberId($newMemberId);
                $GmoMember->setCustomer($Customer);
                $GmoMember->setCustomerCreateDate($Customer->getCreateDate());
                $GmoMember->setCustomerId($Customer->getId());
            }else{                
                $GmoMember->setNewMemberId($newMemberId);
            }

            $app['orm.em']->persist($GmoMember);

            return true;
        }
    }

    /**
     * Get total duplicate member ID
     * @param type $app
     * @return type
     */
    public function getTotalDuplicateMemberID ($app){
        $sql = 'SELECT COUNT(*)
                FROM dtb_gmo_member a   INNER JOIN (  SELECT old_member_id
                                                    FROM dtb_gmo_member
                                                    WHERE old_member_id IS NOT NULL 
                                                    GROUP BY old_member_id 
                                                    HAVING COUNT(*) > 1 )  b
                                        ON a.old_member_id = b.old_member_id 
                WHERE a.old_member_id = a.new_member_id ;';
        
        $connection = $app['orm.em']->getConnection();
        $result = $connection->prepare($sql);         
        $result->execute(); 
        $data = $result->fetchColumn();
        return $data;
                
    }
    
    /**
     * Get Duplicate GMO member
     * @param type $app
     * @param type $offset
     * @return type
     */
    public function getDuplicateMemberId($app, $limit)
    {
        $sql = "SELECT a.id, a.old_member_id, a.customer_id, a.create_date ";
        
        $sql .= "FROM dtb_gmo_member a   INNER JOIN (  SELECT old_member_id
                                                    FROM dtb_gmo_member
                                                    WHERE old_member_id IS NOT NULL 
                                                    GROUP BY old_member_id 
                                                    HAVING COUNT(*) > 1 )  b
                                        ON a.old_member_id = b.old_member_id 
                WHERE a.old_member_id = a.new_member_id
                LIMIT $limit ;";
        
        $connection = $app['orm.em']->getConnection();
        $result = $connection->prepare($sql); 
        
        $result->execute(); 
        $data = $result->fetchAll();
        return $data;

    }
    
    /**
     * Get all gmo member 
     * @return type
     */
    public function getAllGmoMember($type = true) 
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
    	$qb->select('m')
            ->from('\Plugin\GmoPaymentGateway\Entity\GmoMember', 'm')
            ->join('m.Customer', 'c')
            ->where('c.del_flg = 0 '
                    . 'AND m.old_member_id IS NOT NULL AND m.new_member_id IS NOT NULL '
                    . 'AND m.old_member_id <> m.new_member_id ' );
        $qb->addOrderBy('c.update_date', 'DESC');
        $result = $type ? $qb->getQuery() : $qb;
    	return $result;
    }
    
    /**
     * Find Gmo member existed record or not
     * @return null if not exist else return 1 record
     */
    public function checkExistGmoMember() 
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('m')
            ->from('\Plugin\GmoPaymentGateway\Entity\GmoMember', 'm');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }
}
	